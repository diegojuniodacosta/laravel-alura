Entendendo sobre API's

Api's = funcionam como meio-de-campo (intermediadores) entre os dados e regras de
negócios e o cliente (visualização do sistema)
Ou seja, transferem os dados entre o banco de dados e o cliente

API = Interface de programação de aplicações

API = é uma forma de ter/fornecer acesso ao um conjunto de serviços

------------------------------------------------------------------------------------

Tipos de API

- APIs WEB
- APIs de código fonte

------------------------------------------------------------------------------------

- Formatos que as APIs que se apresentam
    - RPC -> mais antigo
    - Soap -> mais antigo
    - REST -> mais utilizado atualmente
           -> utiliza os verbos HTTP (get,post,put,etc)

------------------------------------------------------------------------------------

Vamos construir neste projeto uma API com Larável

Endpoint = é uma url/ponto que conseguimos acessar a API

Iremos utilizar o formato Aplication Json para transferência de dados

------------------------------------------------------------------------------------

- Definimos as rotas de APIs dentro de api.php

- Toda rota que for definida dentro api.php já tem o prefixo api/
- Assim, não precisamos informar api/ na rota
- Exemplo:
    - Route::get('/url')

------------------------------------------------------------------------------------

Interface Padrão HTTP

GET /series             => Pegar todas as series
GET /series/:id         => Pegar série específica
POST /series            => Inserir nova série
PUT /series/:id         => Atualizar uma série
DELETE /series/:id      => Remover uma série

PUT   = atualiza recurso por completo
PATCH = atualiza parte do recurso

OBSERVAÇÃO:
- O PUT pode se comportar como POST

-------------------------------------------------------------------------------------

- Para informamos o formato, utilizamos:

Cabeçalhos:

    - Requisição:
        - Accept: application/json

    - Resposta
        - Content-Type: application/json

--------------------------------------------------------------------------------------

Código de Status HTTP

Classe                       Semântica
2xx                 Indica que a requisição foi processada com sucesso

3xx                 Indica ao cliente uma ação a ser tomada para que a
                    requisição possa ser concluída

4xx                 Indica erros na requisição causados pelo cliente

5xx                 Indica que a requisição não foi concluída devido a erros
                    ocorridos no servidor

----------------------------------------------------------------------------------------

REST = Representational State Transfer

- Quando criamos a API no padrão REST estamos transferindo o estado de recurso

----------------------------------------------------------------------------------------

Sub-recursos

- É quando buscamos informações de um recurso a partir de um outro recurso
- Exemplo:
    - Quando buscamos as temporadas a partir da série
    - Na criação da rota utilizamos:
        - localhost:8000/api/recursopai/idrecursopai/sub-recurso


-----------------------------------------------------------------------------------------

Dica sobre criar relação na Model

- Temos o método:
    - hasManyThrough
    - Ele busca o recurso através de outro recurso
    - Exemplo:
        - Vamos buscar todos os episódios da série
        - Assim, a partir da temporada teremos os epsódios da série
        - return $this->hasManyThrough(Episode::class, Season::class)

------------------------------------------------------------------------------------------

Conceito Idempotência

É uma propriedade de alguma operação que permite que ela seja executada várias
vezes sem alterar o resultado

Exemplo:
- O verbo POST não é idempotente ou seja, ao enviar várias vezes a mesma requisição
será criada várias vezes

- O verbo PUT é idempotente ou seja, ao enviar várias vezes a mesma requisição
    - se não existir, será criado
    - se existir, será atualizado
    - se já estiver atualizado, o valor não será alterado

--------------------------------------------------------------------------------------------

Entendendo sobre $casts da Model

- Quando queremos mapear algum atributo e mudar o seu valor, podemos usar $castas na Model

- Exemplo:
    - protected $casts = [
        'value' => 'boolean'
    ]

---------------------------------------------------------------------------------------------

Podemos aplicar filtros na API REST
- Os filtros seria passar os parâmetros no Postman

- Exemplo:
    - Aplicando o filtro nome
    - http://localhost/api/series/?nome=Nome

---------------------------------------------------------------------------------------------

Implementando paginação

- Podemos utilizar o método paginate() do Larável
- Este método irá trazer os itens paginados do banco de dados
- No método informamos quantos itens queremos por págia

    -Exemplo:
        - $query->paginate(perPage: 5);
        - Para irmos para página 2, no Postman podemos passar como parâmetro page=2

---------------------------------------------------------------------------------------------

Entendendo sobre o pacote HATEOAS

- Este pacote serve para utilizarmos os links das respostas do Larável
- Exemplo:
    - Ao utilizar o paginate(), o Larável retorna os links
    - Com o HATEOAS podemos utilizar os links

    -  "links": [
              {
                  "url": null,
                  "label": "&laquo; Previous",
                  "active": false
              },
              {
                  "url": "http://127.0.0.1:8000/api/series?page=1",
                  "label": "1",
                  "active": true
              },
              {
                  "url": "http://127.0.0.1:8000/api/series?page=2",
                  "label": "2",
                  "active": false
              },
    ]

- Estudar mais sobre Pacote HATEOAS
----------------------------------------------------------------------------------------------

- Entendendo sobre Stateless e JWT

- Stateless = seria uma forma de login sem estado (sem armazenar sessão)

- Autenticação por token
    - O usuário envia o e-mail e senha, assim, e estando válido retornamos o token
    - Este token o usuário pode armazenar e terá acesso ao sistema

- JWT
    - É um tipo de token
    - Observação:
        - Estudar sobre sobre implementar JWT

----------------------------------------------------------------------------------------------

- Entendendo sobre Sanctum

- Este pacote ja vem instalado no Larável por padrão
- É necessário rodar uma migrate
- Ele armazena no banco de dados um token para o usuário

- Utilizando:
    Route::middleware('auth:sanctum')
    - Iremos exigir o token para acessar o Sistema


















































